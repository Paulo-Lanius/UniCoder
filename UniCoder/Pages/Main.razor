@page "/"
@using UniCoder.Enums
@using UniCoder.Services
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center">
        @HeaderText
    </MudText>

    <MudGrid Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Style="margin-top: 0px;">
        <!-- MudButtonGroup à esquerda -->
        <MudItem xs="4" sm="4" md="4" lg="4" Class="d-flex justify-start align-center">
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                <MudButton>@Algorithm.GetDescription()</MudButton>
                <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown">
                    @foreach (var enumValue in Enum.GetValues(typeof(TypeAlgorithm)))
                    {
                        <MudMenuItem OnClick="() => SetButtonValue((TypeAlgorithm)enumValue)">
                            @(((TypeAlgorithm)enumValue).GetDescription())
                        </MudMenuItem>
                    }
                </MudMenu>
            </MudButtonGroup>
        </MudItem>

        <!-- ToggleIcon e Span no centro -->
        <MudItem xs="4" sm="4" md="4" lg="4" Class="d-flex justify-center align-center">
            <MudToggleIconButton @bind-Toggled="ActionSet" title="@(Action.GetDescription())" Variant="Variant.Filled"
                                 Icon="@Icons.Material.Outlined.NoEncryption" Color="@Color.Error"
                                 ToggledIcon="@Icons.Material.Filled.EnhancedEncryption" ToggledColor="@Color.Success" />
            <span style="font-size: 1.5rem; margin-left: 5px">@(Action.GetDescription())</span>
        </MudItem>

        <!-- Fab à direita -->
        <MudSpacer />
        @* TODO: Modal para configuração de parâmetros dos métodos *@
        @* <MudItem xs="4" sm="4" md="4" lg="4" Class="d-flex justify-end align-center">
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Settings" OnClick="OpenConfig" />
        </MudItem> *@
    </MudGrid>



    <MudTextField @bind-Value="@_text" T="string" Label="Entrada" Variant="Variant.Outlined" AutoGrow Lines="5" MaxLines="5" @onfocus="OnFocus" />
    <MudStack AlignItems="AlignItems.Center">
        <MudIcon Icon="@_currentIcon" Size="Size.Large" @onclick="CalculateResult" />
    </MudStack>
    <MudTextField @bind-Value="@_result" T="string" Label="Saída" Variant="Variant.Outlined" AutoGrow Lines="10" MaxLines="10" ReadOnly />
</MudContainer>

@code {
    [Parameter]
    public string HeaderText { get; set; } = "";
    [Parameter]
    public TypeAlgorithm Algorithm { get; set; }
    [Parameter]
    public TypeAction Action { get; set; }

    private bool _actionSet;
    public bool ActionSet
    {
        get => _actionSet;
        set
        {
            _actionSet = value;
            Action = _actionSet ? TypeAction.Encode : TypeAction.Decode;
        }
    }

    private string _text = "";
    private string _result = "";
    private string _currentIcon = Icons.Material.Outlined.ChangeCircle;

    protected override void OnInitialized()
    {
        Algorithm = TypeAlgorithm.EliasGamma;
        ActionSet = true;
        Action = TypeAction.Encode;
    }

    private void SetButtonValue(TypeAlgorithm value)
    {
        Algorithm = value;
    }

    private void CalculateResult()
    {
        _currentIcon = Icons.Material.Filled.ChangeCircle;

        _result = Executor.Execute(Algorithm, Action, _text);
    }

    private Task OpenConfig()
    {
        return DialogService.ShowAsync<ConfigDialog>($"Configuração - {Algorithm.GetDescription()}");
    }

    private void OnFocus()
    {
        _currentIcon = Icons.Material.Outlined.ChangeCircle;
    }
}
