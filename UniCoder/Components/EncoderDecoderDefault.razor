@using UniCoder.Enums
@using UniCoder.Services

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudText Typo="Typo.h3" Align="Align.Center">
        @HeaderText
    </MudText>

    <MudTextField @bind-Value="@_text" T="string" Label="Entrada" Variant="Variant.Outlined" AutoGrow Lines="10" MaxLines="10" @onfocus="OnFocus" />
    <MudStack AlignItems="AlignItems.Center">
        <MudIcon Icon="@_currentIcon" Size="Size.Large" @onclick="CalculateResult" />
    </MudStack>
    <MudTextField @bind-Value="@_result" T="string" Label="Saída" Variant="Variant.Outlined" AutoGrow Lines="10" MaxLines="10" ReadOnly />
</MudContainer>

@code {
    [Parameter]
    public string HeaderText { get; set; } = "";
    [Parameter]
    public TypeAlgorithm Algorithm { get; set; }
    [Parameter]
    public TypeAction Action { get; set; }

    private string _text = "";
    private string _result = "";
    private string _currentIcon = Icons.Material.Outlined.ChangeCircle;
    private bool _isOutlined = true;

    protected override void OnInitialized() { }

    private void CalculateResult()
    {
        _currentIcon = Icons.Material.Filled.ChangeCircle;

        switch (Algorithm)
        {
            case TypeAlgorithm.Huffman:
                _result = Action == TypeAction.Encode ? EncrypterService.EncodeHuffman(_text) : DecrypterService.DecodeHuffman(_text);
                break;
            case TypeAlgorithm.FibonacciZeckendorf:
                _result = Action == TypeAction.Encode ? EncrypterService.EncodeFibonacciZeckendorf(_text) : DecrypterService.DecodeFibonacciZeckendorf(_text);
                break;
            case TypeAlgorithm.Golomb:
                string v = Action == TypeAction.Encode ? EncrypterService.EncodeGolomb(_text) : DecrypterService.DecodeGolomb(_text);
                _result = v;
                break;
            case TypeAlgorithm.EliasGamma:
                _result = Action == TypeAction.Encode ? EncrypterService.EncodeEliasGamma(_text) : DecrypterService.DecodeEliasGamma(_text);
                break;
            default:
                _result = "Algoritmo não definido!";
                break;
        }
    }

    private void OnFocus()
    {
        _currentIcon = Icons.Material.Outlined.ChangeCircle;
    }
}